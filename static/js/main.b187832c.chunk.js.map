{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","goods","setGoods","handleSort","type","sortedGoods","Alphabetical","sort","Length","a","b","length","Reverse","reverse","className","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAIKA,E,oEAAAA,K,4BAAAA,E,gBAAAA,E,mBAAAA,M,KAME,IAAMC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAgB,WAC3B,MAA0BC,mBAAmBF,GAA7C,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAa,SAACC,GAClB,IAAIC,EAEJ,OAAQD,GACN,KAAKP,EAASS,aACZD,EAAc,YAAIJ,GAAOM,OACzB,MACF,KAAKV,EAASW,OACZH,EAAc,YAAIJ,GAAOM,MAAK,SAACE,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UACrD,MACF,KAAKd,EAASe,QACZP,EAAc,YAAIJ,GAAOY,UACzB,MACF,QACER,EAAW,UAAOP,GAGtBI,EAASG,IAGX,OACE,sBAAKS,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEV,KAAK,SACLU,UAAU,0BACVC,QAAS,kBAAMZ,EAAWN,EAASS,eAHrC,iCAQA,wBACEF,KAAK,SACLU,UAAU,6BACVC,QAAS,kBAAMZ,EAAWN,EAASW,SAHrC,4BAQA,wBACEJ,KAAK,SACLU,UAAU,6BACVC,QAAS,kBAAMZ,EAAWN,EAASe,UAHrC,qBAQA,wBACER,KAAK,SACLU,UAAU,4BACVC,QAAS,kBAAMZ,EAAW,OAH5B,sBASF,6BACGF,EAAMe,KAAI,SAACC,GAAD,OACT,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCjFnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b187832c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nenum SortType {\n  Alphabetical = 'Alphabetical',\n  Length = 'Length',\n  Reverse = 'Reverse',\n}\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<string[]>(goodsFromServer);\n\n  const handleSort = (type: SortType | null) => {\n    let sortedGoods: string[];\n\n    switch (type) {\n      case SortType.Alphabetical:\n        sortedGoods = [...goods].sort();\n        break;\n      case SortType.Length:\n        sortedGoods = [...goods].sort((a, b) => a.length - b.length);\n        break;\n      case SortType.Reverse:\n        sortedGoods = [...goods].reverse();\n        break;\n      default:\n        sortedGoods = [...goodsFromServer];\n    }\n\n    setGoods(sortedGoods);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className=\"button is-info is-light\"\n          onClick={() => handleSort(SortType.Alphabetical)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button is-success is-light\"\n          onClick={() => handleSort(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button is-warning is-light\"\n          onClick={() => handleSort(SortType.Reverse)}\n        >\n          Reverse\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button is-danger is-light\"\n          onClick={() => handleSort(null)}\n        >\n          Reset\n        </button>\n      </div>\n\n      <ul>\n        {goods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}